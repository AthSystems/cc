-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
local monitor = peripheral.find("monitor") or error("No monitor found")
rednet.open(peripheral.getName(modem))

-- === Config ===
local master_id = 1
local ptc_logs = "sky-logs"
local ptc_control = "sky-control"
local stop_button_label = "[   STOP   ]"
local clear_button_label = "[ CLEAR ]"

-- === ID to Name Map ===
local idMap = {
    [0] = "Drills",
    [1] = "Master",
    [2] = "DFF",
    [3] = "DFB",
    [5] = "Pusher",
    [6] = "LV 0", [7] = "LV 6", [8] = "LV 8", [9] = "LV 10",
    [10] = "LV 12", [11] = "LV 14", [12] = "LV 5", [13] = "LV 7",
    [14] = "LV 9", [15] = "LV 11", [16] = "LV 13", [17] = "LV 15",
    [20] = "Deployer",
    [23] = "Drawer",
    [24] = "Monitor"
}

-- === Monitor Setup ===
monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.clear()
local width, height = monitor.getSize()
local lines = {}

-- === Utilities ===
local function drawUI()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()

    local logHeight = height - 1
    for i, entry in ipairs(lines) do
        if i > logHeight then break end
        monitor.setCursorPos(1, i)

        monitor.setTextColor(colors.lime)
        monitor.write(entry.time .. " | ")

        monitor.setTextColor(colors.orange)
        monitor.write(entry.source)

        monitor.setTextColor(colors.white)
        monitor.write(" -> " .. entry.message)
    end

    -- STOP button (centered)
    monitor.setCursorPos(math.floor((width - #stop_button_label) / 2), height)
    monitor.setBackgroundColor(colors.red)
    monitor.setTextColor(colors.white)
    monitor.write(stop_button_label)

    -- CLEAR button (bottom-right)
    monitor.setCursorPos(width - #clear_button_label + 1, height)
    monitor.setBackgroundColor(colors.gray)
    monitor.setTextColor(colors.white)
    monitor.write(clear_button_label)
end

local function addLine(senderID, message)
    local time = os.date("%H:%M:%S")
    local name = idMap[senderID] or ("ID:" .. tostring(senderID))
    table.insert(lines, { time = time, source = name, message = message })

    if #lines > (height - 1) then
        table.remove(lines, 1)
    end

    drawUI()
end

local function formatFromTable(tbl)
    local source = tbl.source or "unknown"
    local msg = tbl.status or tbl.message or tbl.msg or "unknown"
    if tbl.level then
        source = source .. " @ LVL " .. tostring(tbl.level)
    end
    return source, msg
end

-- === Listeners ===
local function listenLogs()
    while true do
        local senderID, msg, protocol = rednet.receive(ptc_logs)

        if type(msg) == "string" then
            addLine(senderID, msg)
        elseif type(msg) == "table" then
            local src, body = formatFromTable(msg)
            addLine(senderID, body)
        else
            addLine(senderID, "Invalid message type")
        end
    end
end

local function listenTouch()
    while true do
        local _, _, x, y = os.pullEvent("monitor_touch")

        if y == height then
            if x >= math.floor((width - #stop_button_label) / 2) and x <= math.floor((width + #stop_button_label) / 2) then
                rednet.send(master_id, "stop", ptc_control)
                table.insert(lines, { time = os.date("%H:%M:%S"), source = "Monitor", message = "STOP sent to master" })
                drawUI()
            elseif x >= width - #clear_button_label + 1 and x <= width then
                lines = {}
                drawUI()
            end
        end
    end
end

-- === Launch ===
parallel.waitForAll(listenLogs, listenTouch)
