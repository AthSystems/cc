-- === Setup ====
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

local monitor = peripheral.find("monitor") or error("No monitor found")
monitor.setTextScale(1)
monitor.setBackgroundColor(colors.black)
monitor.setTextColor(colors.white)

-- === Config ===
local kw_control = "sky-control"
local kw_logs = "sky-logs"
local kw_stop = "stop"
local kw_start = "start"
local button_x1, button_y1 = 2, 2
local button_x2, button_y2 = 17, 4

-- === State ===
local is_running = false

-- === UI ===
local function draw_button()
    monitor.clear()
    monitor.setCursorPos(1, 1)
    monitor.write("Sky Farm Monitor")

    monitor.setCursorPos(button_x1, button_y1)
    if is_running then
        monitor.setBackgroundColor(colors.red)
        monitor.setTextColor(colors.white)
        monitor.setCursorPos(button_x1, button_y1)
        monitor.write("   STOP FARM   ")
    else
        monitor.setBackgroundColor(colors.lime)
        monitor.setTextColor(colors.black)
        monitor.setCursorPos(button_x1, button_y1)
        monitor.write("   START FARM  ")
    end
    monitor.setBackgroundColor(colors.black)
    monitor.setTextColor(colors.white)
end

local function is_within_button(x, y)
    return x >= button_x1 and x <= button_x2 and y >= button_y1 and y <= button_y2
end

-- === Communication ===
local function sendControl(msg)
    rednet.broadcast(msg, kw_control)
end

-- === Event Loop ===
local function listen_touch()
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")
        if is_within_button(x, y) then
            if is_running then
                sendControl(kw_stop)
                is_running = false
            else
                sendControl(kw_start)
                is_running = true
            end
            draw_button()
        end
    end
end

local function listen_logs()
    while true do
        local _, msg, protocol = rednet.receive(kw_logs)
        if type(msg) == "string" then
            print(msg)
        elseif type(msg) == "table" and msg.status then
            -- This is a drawer status log (optional print)
            print(string.format("[Drawer] %.1f%% full (%s)", msg.percent or 0, msg.status))
        end
    end
end

local function listen_control_state()
    while true do
        local _, msg, proto = rednet.receive(kw_control)
        if msg == kw_stop then
            is_running = false
            draw_button()
        elseif msg == kw_start then
            is_running = true
            draw_button()
        end
    end
end

-- === Launch ===
rednet.open("back")
draw_button()
parallel.waitForAny(listen_touch, listen_logs, listen_control_state)
