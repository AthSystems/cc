-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

-- === Global State ===
local farm_running = false
local drill_state = false
local pusher_lvl = 0

-- === Node IDs ===
local nodeDrills = 0
local nodePusher = 5
local nodeDeploy = 18

-- === Drill Keywords ===
local kw_drills_forward     = "frontward"
local kw_drills_fb_forward  = "DFF"
local kw_drills_backward    = "backward"
local kw_drills_fb_backward = "DFB"

-- === Pusher Keywords ===
local kw_pusher_5m      = 5
local kw_pusher_fb_5m   = "LVL 5"
local kw_pusher_1m      = 1
local kw_pusher_fb_1m   = "LVL"
local kw_pusher_ground  = -15
local kw_pusher_fb_ground = "LVL 0"
local kw_pusher_fb_top  = "LVL 15"

-- === Deploy Keywords ===
local kw_deploy     = "deploy"
local kw_deploy_fb  = "deployed"

-- === Communication Functions ===

function send(id, message)
    print("→ Sending to " .. id .. ": " .. message)
    rednet.send(id, message)
end





-- === Reply Handlers ===

-- Wait indefinitely for reply
function waitForReply(keyword)
    while true do
        local _, msg = rednet.receive()
        if msg and msg:find(keyword) then
            print("✔ " .. msg)
            local lvlStr = string.match(msg, "LVL ?(%d+)")
            local level = tonumber(lvlStr)
            return msg, level
        end
    end
end

-- Wait with timeout for reply
function waitForReplyWithTimeout(keyword, timeout)
    local start = os.clock()
    while true do
        local remaining = timeout - (os.clock() - start)
        if remaining <= 0 then
            print("⚠️ Timeout waiting for: " .. keyword)
            return nil, nil
        end

        local _, msg = rednet.receive(remaining)
        if msg and msg:find(keyword) then
            print("✔ " .. msg)
            local lvlStr = string.match(msg, "LVL ?(%d+)")
            local level = tonumber(lvlStr)
            return msg, level
        end
    end
end

-- Send and wait indefinitely
function sendAndWait(id, message, waitFor)
    send(id, message)
    local reply, level = waitForReply(waitFor)
    return reply, level
end

-- Send and wait with timeout
function sendAndWaitWithTimeout(id, message, waitFor, timeout)
    send(id, message)
    local reply, level = waitForReplyWithTimeout(waitFor, timeout)
    return reply, level
end














-- === Drill Control ===

function toggleDrills()
    if drill_state then
        sendAndWait(nodeDrills, kw_drills_backward, kw_drills_fb_backward)
    else
        sendAndWait(nodeDrills, kw_drills_forward, kw_drills_fb_forward)
    end
    drill_state = not drill_state
end

-- === Pusher Control ===

function move_block_pusher_timed(target_lvl, timeout)
    if target_lvl == 1 then
        if pusher_lvl <= 15 then
            send(nodePusher, kw_pusher_1m)

            if pusher_lvl == 14 then
                _, new_lvl = waitForReplyWithTimeout(kw_pusher_fb_top, timeout)
            else
                _, new_lvl = waitForReplyWithTimeout(kw_pusher_fb_1m, timeout)
            end

            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end

    elseif target_lvl == 5 then
        if pusher_lvl == 0 then
            _, new_lvl = sendAndWaitWithTimeout(nodePusher, kw_pusher_5m, kw_pusher_fb_5m, timeout)
            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end

    elseif target_lvl == 0 then
        if pusher_lvl == 15 then
            _, new_lvl = sendAndWaitWithTimeout(nodePusher, kw_pusher_ground, kw_pusher_fb_ground, timeout)
            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end
    end
end


function move_block_pusher(target_lvl)
    if target_lvl == 1 then
        if pusher_lvl <= 15 then
            send(nodePusher, kw_pusher_1m)

            if pusher_lvl == 14 then
                _, new_lvl = waitForReply(kw_pusher_fb_top)
            else
                _, new_lvl = waitForReply(kw_pusher_fb_1m)
            end

            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end

    elseif target_lvl == 5 then
        if pusher_lvl == 0 then
            _, new_lvl = sendAndWait(nodePusher, kw_pusher_5m, kw_pusher_fb_5m)
            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end

    elseif target_lvl == 0 then
        if pusher_lvl == 15 then
            _, new_lvl = sendAndWait(nodePusher, kw_pusher_ground, kw_pusher_fb_ground)
            if new_lvl then
                pusher_lvl = new_lvl
                print("Pusher Level: " .. pusher_lvl)
            end
        end
    end
end

-- === Deploy Control ===

function deploy()
    sendAndWait(nodeDeploy, kw_deploy, kw_deploy_fb)
end

-- === Farm Sequence ===

function farm_cycle()
    if farm_running then return end

    deploy()
    sleep(6)

    while pusher_lvl < 7 do
        move_block_pusher_timed(1,1)
        sleep(1)
    end

    toggleDrills()
    while pusher_lvl < 15 do 
        move_block_pusher(1)
        toggleDrills()
    end

    move_block_pusher(0)  -- Reset to ground
    toggleDrills()
end

-- === Start ===
sleep(5)
farm_cycle()
