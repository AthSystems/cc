-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

-- === Node IDs ===
local nodeDrills = 0
local nodePusher = 5
local nodeDeploy = 20
local nodeDrawer = 23
local nodeMonitor = 24

-- === Protocols ===
local ptc_control = "sky-control"
local ptc_reply = "sky-reply"
local ptc_logs = "sky-logs"
local ptc_status = "sky-status"

-- === Keywords ===
local kw_drills_forward     = "forward"
local kw_drills_backward    = "backward"
local kw_deploy             = "deploy"

-- === State ===
local drill_state = true
local pusher_lvl = 1
local manual_stop = true
local drawer_stop = false
local farm_running = false

-- === Logging ===
local function logs(msg)
    print("[" .. os.date("%H:%M:%S") .. "] " .. msg)
    rednet.send(nodeMonitor, msg, ptc_logs)
end

-- === Messaging Utilities ===
local function send(id, msg)
    rednet.send(id, msg, ptc_control)
end

local function waitForReply(keyword)
    while true do
        local _, msg = rednet.receive()
        if msg and msg:find(keyword) then
            logs(msg)
            local lvl = tonumber(string.match(msg, "LVL ?(%d+)"))
            return msg, lvl
        end
    end
end

local function waitForReplyWithTimeout(keyword, timeout)
    local start = os.clock()
    while os.clock() - start < timeout do
        local _, msg = rednet.receive(timeout)
        if msg and msg:find(keyword) then
            logs(msg)
            local lvl = tonumber(string.match(msg, "LVL ?(%d+)"))
            return msg, lvl
        end
    end
    return nil, nil
end

local function sendAndWait(id, msg, keyword)
    send(id, msg)
    return waitForReply(keyword)
end

local function pingNode(id, timeout)
    logs("Pinging node: " .. id)
    rednet.send(id, "ping", ptc_status)
    local start = os.clock()
    while os.clock() - start < timeout do
        local sender, message, protocol = rednet.receive(ptc_reply, timeout)
        if sender == id and message == "pong" then
            logs("Node " .. id .. " responded.")
            return true
        end
    end
    logs("Node " .. id .. " did not respond.")
    return false
end

-- === Controls ===
local function move_drills(reverse)
    if reverse then
        sendAndWait(nodeDrills, kw_drills_backward, "DFB")
    else
        sendAndWait(nodeDrills, kw_drills_forward, "DFF")
    end
end

local function toggle_drills()
    move_drills(not drill_state)
    drill_state = not drill_state
end

local function deploy()
    sendAndWait(nodeDeploy, kw_deploy, "RD")
end

local function move_block_pusher(target_lvl)
    if target_lvl == 1 then
        send(nodePusher, 1)
        if pusher_lvl == 14 then
            _, new = waitForReply("LVL 15")
        else
            _, new = waitForReply("LVL")
        end
        pusher_lvl = new or pusher_lvl

    elseif target_lvl == 0 then
        _, new = sendAndWait(nodePusher, -15, "LVL 1")
        pusher_lvl = new or pusher_lvl
    end
end

function upward_plate_sequence_with_timeout()
    local timeout_duration = 20
    local last_feedback_time = os.clock()

    while pusher_lvl < 15 do
        send(nodePusher, 1) -- ask to move plate 1 up
        sleep(0.1)
        local lvl_reply, new_lvl = waitForReplyWithTimeout("LVL", 3)
        if new_lvl then
            pusher_lvl = new_lvl
            last_feedback_time = os.clock()
            toggle_drills()
        else
            -- No level feedback received in this step
            if os.clock() - last_feedback_time >= timeout_duration then
                logs("No LVL feedback for 20s. Triggering drill recovery.")
                -- Wait for drill to finish their run
                toggle_drills()
                waitForReply(drill_state and "DFF" or "DFB") -- or DFB depending on current state
                logs("Drill finished. Lowering plate to retry.")

                -- Move 1 step down (reverse)
                send(nodePusher, -1)
                waitForReply("LVL") -- catch the level again
                pusher_lvl = pusher_lvl - 1

                -- Restart drilling
                toggle_drills()

                last_feedback_time = os.clock()
            end
        end
    end
end

function reset()
    move_block_pusher(0)
    if not drill_state then
        move_drills(true) -- only send back if forward
        drill_state = true
    end
end





local function stats_summary(start_time, fallback_count)
    local duration = os.clock() - start_time
    logs("=== Cycle Stats ===")
    logs("Duration        : " .. string.format("%.1f", duration) .. "s")
    logs("Final Plate LVL : " .. tostring(pusher_lvl))
    logs("Drill Direction : " .. (drill_state and "Forward" or "Backward"))
    logs("Fallback Retries: " .. tostring(fallback_count))
    logs("====================")
end

-- === Farm Loop ===
function farm_cycle()
    if farm_running then return end
    farm_running = true

    local start_time = os.clock()
    local fallback_count = 0

    logs("Starting new cycle.")
    sleep(0.5)

    deploy()
    sleep(6)

    -- === Blind climb from LVL 1 to LVL 5 ===
    local reached_lv5 = false

    while not reached_lv5 do
        local climb_start = os.clock()
        local timeout = 7

        while os.clock() - climb_start < timeout do
            move_block_pusher(1)
            sleep(0.5)

            if pusher_lvl >= 5 then
                reached_lv5 = true
                break
            end
        end

        if not reached_lv5 then
            logs("LVL 5 not reached within 7s. Moving 1 block down and retrying...")
            fallback_count = fallback_count + 1
            send(nodePusher, -1)
            sleep(1.5)
        end
    end

    logs("Reached LVL 5. Beginning drill-assisted push to LVL 15.")

    -- === Drill + Push Loop ===
    upward_plate_sequence_with_timeout()

    logs("Cycle finished. Resetting.")

    reset()

    stats_summary(start_time, fallback_count)

    logs("Farm ready for new cycle.")
    farm_running = false
end



-- === Listener for Stop/Start ===
local function listenControl()
    while true do
        local sender, msg, protocol = rednet.receive()
        if protocol == ptc_control then
            if msg == "stop" then
                if sender == nodeMonitor then
                    manual_stop = true
                    logs("Manual stop triggered.")
                elseif sender == nodeDrawer then
                    drawer_stop = true
                    logs("Drawer triggered stop.")
                end
            elseif msg == "start" then
                if sender == nodeMonitor then
                    manual_stop = false
                    logs("Manual start triggered.")
                elseif sender == nodeDrawer then
                    drawer_stop = false
                    logs("Drawer resume triggered.")
                end
            end
        end
    end
end

-- === Wait Manual Start ===
local function waitManualStart()
    logs("Waiting for START button on monitor...")
    while manual_stop do
        sleep(0.5)
    end
end

-- === Init ===
logs("Pinging all nodes...")
for _, id in ipairs({ nodeDrills, nodePusher, nodeDeploy, nodeDrawer }) do
    pingNode(id, 4)
end

logs("Resetting system...")
reset()

-- === Launch Main ===
parallel.waitForAny(
    listenControl,
    function()
        waitManualStart()
        while true do
            if not manual_stop and not drawer_stop then
                farm_cycle()

                -- Add these log checks right after farm_cycle ends
                if manual_stop then
                    logs("Manual stop active after cycle. Waiting for resume.")
                end
                if drawer_stop then
                    logs("Drawer stop active after cycle. Waiting for drawer to empty.")
                end
            end
            sleep(0.5)
        end
    end
)
