-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

-- === Node IDs ===
local nodeDrills = 0
local nodePusher = 5
local nodeDeploy = 20
local nodeDrawer = 23
local nodeMonitor = 24

-- === Protocols ===
local ptc_control = "sky-control"
local ptc_reply = "sky-reply"
local ptc_logs = "sky-logs"
local ptc_status = "sky-status"

-- === Keywords ===
local kw_drills_forward     = "forward"
local kw_drills_backward    = "backward"
local kw_deploy             = "deploy"

-- === State ===
local drill_state = true
local pusher_lvl = 0
local manual_stop = true
local drawer_stop = false

-- === Logging ===
local function logs(msg)
    print("[" .. os.date("%H:%M:%S") .. "] " .. msg)
    rednet.send(nodeMonitor, msg, ptc_logs)
end

-- === Messaging Utilities ===
local function send(id, msg)
    rednet.send(id, msg, ptc_control)
end

local function waitForReply(keyword)
    while true do
        local _, msg = rednet.receive()
        if msg and msg:find(keyword) then
            logs(msg)
            local lvl = tonumber(string.match(msg, "LVL ?(%d+)"))
            return msg, lvl
        end
    end
end

local function sendAndWait(id, msg, keyword)
    send(id, msg)
    return waitForReply(keyword)
end

local function pingNode(id, timeout)
    logs("Pinging node: " .. id)
    rednet.send(id, "ping", ptc_status)
    local start = os.clock()
    while os.clock() - start < timeout do
        local sender, message, protocol = rednet.receive(ptc_reply, timeout)
        if sender == id and message == "pong" then
            logs("Node " .. id .. " responded.")
            return true
        end
    end
    logs("Node " .. id .. " did not respond.")
    return false
end

-- === Controls ===
local function move_drills(reverse)
    if reverse then
        sendAndWait(nodeDrills, kw_drills_backward, "DFB")
    else
        sendAndWait(nodeDrills, kw_drills_forward, "DFF")
    end
end

local function toggle_drills()
    move_drills(not drill_state)
    drill_state = not drill_state
end

local function deploy()
    sendAndWait(nodeDeploy, kw_deploy, "RD")
end

local function move_block_pusher(target_lvl)
    if target_lvl == 5 and pusher_lvl == 0 then
        _, new = sendAndWait(nodePusher, 5, "LVL 5")
        pusher_lvl = new or pusher_lvl
    elseif target_lvl == 1 and pusher_lvl <= 14 then
        send(nodePusher, 1)
        if pusher_lvl == 14 then
            _, new = waitForReply("LVL 15")
        else
            _, new = waitForReply("LVL")
        end
        pusher_lvl = new or pusher_lvl
    elseif target_lvl == 0 and pusher_lvl == 15 then
        _, new = sendAndWait(nodePusher, -15, "LVL 0")
        pusher_lvl = new or pusher_lvl
    end
end

local function reset()
    move_block_pusher(0)
    move_drills(true)
end

-- === Farm Loop ===
local function farm_cycle()
    if manual_stop or drawer_stop then return end

    logs("Starting farm cycle.")
    deploy()
    sleep(6)

    while pusher_lvl < 7 do
        move_block_pusher(1)
        sleep(1)
    end

    toggle_drills()

    while pusher_lvl < 15 do
        move_block_pusher(1)
        toggle_drills()
    end

    logs("Cycle finished. Resetting...")
    reset()
    logs("Farm ready.")
end

-- === Listener for Stop/Start ===
local function listenControl()
    while true do
        local sender, msg, protocol = rednet.receive()
        if protocol == ptc_control then
            if msg == "stop" then
                if sender == nodeMonitor then
                    manual_stop = true
                    logs("Manual stop triggered.")
                elseif sender == nodeDrawer then
                    drawer_stop = true
                    logs("Drawer triggered stop.")
                end
            elseif msg == "start" then
                if sender == nodeMonitor then
                    manual_stop = false
                    logs("Manual start triggered.")
                elseif sender == nodeDrawer then
                    drawer_stop = false
                    logs("Drawer resume triggered.")
                end
            end
        end
    end
end

-- === Wait Manual Start ===
local function waitManualStart()
    logs("Waiting for START button on monitor...")
    while manual_stop do
        sleep(0.5)
    end
end

-- === Init ===
logs("Pinging all nodes...")
for _, id in ipairs({ nodeDrills, nodePusher, nodeDeploy, nodeDrawer }) do
    pingNode(id, 4)
end

logs("Resetting system...")
reset()

-- === Launch Main ===
parallel.waitForAny(
    listenControl,
    function()
        waitManualStart()
        while true do
            if not manual_stop and not drawer_stop then
                farm_cycle()
            end
            sleep(0.5)
        end
    end
)
