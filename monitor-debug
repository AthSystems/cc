-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
local monitor = peripheral.find("monitor") or error("No monitor found")
rednet.open(peripheral.getName(modem))

-- === Target ===
local master_id = 1
local ptc_control = "sky-debug"

-- === Buttons ===
local actions = {
    { label = "Drill → FWD",   cmd = "drill_fwd" },
    { label = "Drill → BWD",   cmd = "drill_bwd" },
    { label = "Drill Toggle",  cmd = "drill_toggle" },
    { label = "Deploy",        cmd = "deploy" },
    { label = "Plate +1",      cmd = "plate_up" },
    { label = "To Ground",     cmd = "plate_ground" },
    { label = "To Top",        cmd = "plate_top" },
}

-- === Draw Buttons ===
monitor.setTextScale(0.5)
monitor.setBackgroundColor(colors.black)
monitor.clear()

local w, h = monitor.getSize()
local btn_w, btn_h, spacing = 13, 3, 1
local base_y = h - (#actions * (btn_h + spacing)) + 1
local buttons = {}

for i, a in ipairs(actions) do
    local x = 2
    local y = base_y + (i - 1) * (btn_h + spacing)

    table.insert(buttons, { x = x, y = y, w = btn_w, h = btn_h, cmd = a.cmd })

    -- Draw button
    for dy = 0, btn_h - 1 do
        monitor.setCursorPos(x, y + dy)
        monitor.setBackgroundColor(colors.gray)
        monitor.setTextColor(colors.white)
        monitor.write(string.rep(" ", btn_w))
    end
    monitor.setCursorPos(x + math.floor((btn_w - #a.label) / 2), y + 1)
    monitor.write(a.label)
end

-- === Monitor Touch Handler ===
while true do
    local _, _, tx, ty = os.pullEvent("monitor_touch")

    for _, btn in ipairs(buttons) do
        if tx >= btn.x and tx <= btn.x + btn.w - 1 and ty >= btn.y and ty <= btn.y + btn.h - 1 then
            rednet.send(master_id, btn.cmd, ptc_control)
        end
    end
end
