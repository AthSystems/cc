-- === Setup ===
local drawer_side = "back"
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

local drawer = peripheral.wrap(drawer_side) or error("No drawer found")

-- === Config ===
local monitor_id = 24
local node_name = "drawerNode"
local slot = 1
local ptc_logs = "sky-logs"
local ptc_status = "sky-status"
local ptc_control = "sky-control"
local ptc_replay = "sky-reply"

local kw_fill = "sky-fill"

-- === Utilities ===
local function log(msg)
    print("[" .. os.date("%H:%M:%S") .. "] " .. msg)
    rednet.send(monitor_id, msg, ptc_logs)
end

local function getDrawerData()
    local item = drawer.getItemDetail(slot)
    if not item then return nil end
    local count = item.count
    local limit = drawer.getItemLimit(slot)
    local percent = (count / limit) * 100
    return {
        source = node_name,
        item = item.displayName,
        count = count,
        limit = limit,
        percent = percent,
        status = percent >= 90 and "NEAR FULL" or "NORMAL"
    }
end

-- === Monitor Loop ===
local function monitorDrawer()
    while true do
        local data = getDrawerData()
        if data then
            rednet.send(monitor_id, data, ptc_logs)
        end
        sleep(1)
    end
end

-- === Listener ===
local function listen()
    while true do
        local id, msg, protocol = rednet.receive()
        if msg == "ping" then
            rednet.send(id, "pong", ptc-status)
        elseif msg == kw_fill then
            local data = getDrawerData()
            if data then
                rednet.send(id, tostring(data.percent), ptc_reply)
            end
        end
    end
end

-- === Start ===
log("Drawer node ready.")
parallel.waitForAll(monitorDrawer, listen)
