-- === Setup ===
local drawer_side = "back"
local drawer = peripheral.wrap(drawer_side) or error("No drawer at " .. drawer_side)
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

-- === Configuration ===
local node_name = "drawer_node"
local master_id = 1
local threshold = 90  -- Percent fill to trigger stop
local check_interval = 1

-- === Protocols ===
local ptc_control = "sky-control"
local ptc_status  = "sky-status"
local ptc_reply   = "sky-reply"
local ptc_logs    = "sky-logs"

-- === Utilities ===
local function prompt(msg)
    print("[" .. os.date("%H:%M:%S") .. "] " .. msg)
end

local function log(msg)
    prompt(msg)
    rednet.broadcast("[" .. node_name .. "] : " .. msg, ptc_logs)
end

-- === Drawer Info ===
local function getItemDetail()
    return drawer.getItemDetail(1)
end

local function getPercentFill()
    local detail = getItemDetail()
    return detail and (detail.count / drawer.getItemLimit(1)) * 100 or 0
end

local function getDrawerData()
    local detail = getItemDetail()
    return {
        source = node_name,
        item = detail and detail.displayName or "empty",
        count = detail and detail.count or 0,
        max = drawer.getItemLimit(1),
        percent = getPercentFill()
    }
end

-- === Main Monitoring Loop ===
local function main_loop()
    while true do
        local data = getDrawerData()

        -- Send status message to monitor
        rednet.broadcast(data, ptc_status)

        -- Notify master if threshold exceeded
        if data.percent >= threshold then
            rednet.send(master_id, { action = "stop", source = node_name, percent = data.percent }, ptc_control)
            log("Threshold exceeded (" .. math.floor(data.percent) .. "%) â†’ Sent STOP")
        else
            rednet.send(master_id, { action = "continue", source = node_name, percent = data.percent }, ptc_control)
        end

        sleep(check_interval)
    end
end

-- === Respond to Ping ===
local function listen_ping()
    while true do
        local senderID, msg, proto = rednet.receive()
        if proto == ptc_status and msg == "ping" then
            prompt("Ping received from " .. senderID)
            rednet.send(senderID, "pong", ptc_reply)
        end
    end
end

-- === Launch ===
log("Ready. Monitoring drawer on side: " .. drawer_side)
parallel.waitForAll(main_loop, listen_ping)
