-- === Setup ===
local modem = peripheral.find("modem") or error("No modem found")
rednet.open(peripheral.getName(modem))

-- === Node IDs ===
local nodeDrills = 0
local nodePusher = 5
local nodeDeploy = 20
local ptc_control = "sky-debug"
local ptc_logs = "sky-logs"

-- === State ===
local drill_state = false

-- === Logging ===
local function log(msg)
    print("[DEBUG] " .. msg)
    rednet.broadcast(msg, ptc_logs)
end

-- === Control Map ===
local function handleCommand(cmd)
    if cmd == "drill_fwd" then
        rednet.send(nodeDrills, "forward", ptc_control)
        log("Drill → Forward")

    elseif cmd == "drill_bwd" then
        rednet.send(nodeDrills, "backward", ptc_control)
        log("Drill → Backward")

    elseif cmd == "drill_toggle" then
        local dir = drill_state and "backward" or "forward"
        rednet.send(nodeDrills, dir, ptc_control)
        log("Drill → " .. dir)
        drill_state = not drill_state

    elseif cmd == "deploy" then
        rednet.send(nodeDeploy, "deploy", ptc_control)
        log("Deploy")

    elseif cmd == "plate_up" then
        rednet.send(nodePusher, 1, ptc_control)
        log("Pusher → +1")

    elseif cmd == "plate_ground" then
        rednet.send(nodePusher, -15, ptc_control)
        log("Pusher → Ground")

    elseif cmd == "plate_top" then
        rednet.send(nodePusher, 15, ptc_control)
        log("Pusher → Top")
    end
end

-- === Listener ===
log("Debug listener started")
while true do
    local _, msg, protocol = rednet.receive(ptc_control)
    if type(msg) == "string" then
        handleCommand(msg)
    end
end
